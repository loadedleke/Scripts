???
function Cleanup {
    cd $PSScriptRoot
    if (Test-Path $ScriptFolderPath) 
    {
        Write-Host 'Removing script directory'
        Remove-Item -LiteralPath $ScriptFolderPath -Force -Recurse
    }
}

Function Setup {
    # Cleanup scheduled task if it exists
    $oldTask = Get-ScheduledTask -Taskname $ScheduledTaskName -ErrorAction SilentlyContinue
    if ($oldTask)
    {
        if ($oldTask.State -eq 'Running')
        {
            Stop-ScheduledTask -TaskName $ScheduledTaskName
        }
        Unregister-ScheduledTask -TaskName $ScheduledTaskName -Confirm:$false -ErrorAction SilentlyContinue
    }
    Cleanup
}

$LogPrefix = "\AutopatchClientSetupInstallScheduled"
$Timestamp = Get-Date
$LogPath = "$Env:windir\ccm\logs"
$LogFile = $LogPath + $LogPrefix + $Timestamp.ToFileTimeUtc() + ".log"
$ScheduledTaskName = 'Autopatch Client Setup Installer'
$ScriptFolderPath = "$env:SystemDrive\ProgramData\Microsoft\AutopatchSetupScheduled"
$SystemScriptPath = "$ScriptFolderPath\SetupAutopatchClientPackage.ps1"
$SystemScript = '77u/PCMNCiAgICAuU1lOT1BTSVMNCiAgICBJbnN0YWxscyBNaWNyb3NvZnQgTWFuYWdlZCBEZXNrdG9wIENsaWVudCBMaWJyYXJ5IGFuZCBNaWNyb3NvZnQgQ2xvdWQgTWFuYWdlZCBEZXNrdG9wIEV4dGVuc2lvbg0KICAgIC5FWEFNUExFDQogICAgLlxTZXR1cEF1dG9wYXRjaENsaWVudFBhY2thZ2UucHMxDQojPg0KcGFyYW0oDQogICAgW3N3aXRjaF0gJERpc2FibGVUcmFuc2NyaXB0ID0gJGZhbHNlDQopDQojIEVuc3VyZXMgdGhhdCBJbnZva2UtV2ViUmVxdWVzdCB1c2VzIFRMUyAxLjINCltOZXQuU2VydmljZVBvaW50TWFuYWdlcl06OlNlY3VyaXR5UHJvdG9jb2wgPSBbTmV0LlNlY3VyaXR5UHJvdG9jb2xUeXBlXTo6VGxzMTINCg0KIyBWZXJzaW9uIGFuZCBMb2NhdGlvbiBQYXJhbWV0ZXJzDQokQ2xpZW50TGlicmFyeVZlcnNpb24gPSAyMDIyMDgxMDENCiRDbG91ZE1hbmFnZW1lbnRFeHRlbnNpb25WZXJzaW9uID0gJzEuMi4wMjA4My45NicNCg0KJGNhYkRvd25sb2FkVXJpID0gJ2h0dHBzOi8vbW1kY3VzdG9tZXIubWljcm9zb2Z0LmNvbS9jbGllbnRzZXR1cC8yMDIyMDkyMy4xL0F1dG9wYXRjaFNldHVwUGFja2FnZS5jYWInDQokY2FiRG93bmxvYWRVcmlCYWNrdXAgPSAnaHR0cHM6Ly9tbWRjdXN0b21lci5henVyZWVkZ2UubmV0L2NsaWVudHNldHVwLzIwMjIwOTIzLjEvQXV0b3BhdGNoU2V0dXBQYWNrYWdlLmNhYicNCg0KZnVuY3Rpb24gU2V0LVJlZ2lzdHJ5IHsNCiAgICA8Iw0KICAgICAgICAuU3lub3BzaXMNCiAgICAgICAgICAgIE1vZGlmeSByZWdpc3RyeSBTdHJpbmcgdmFsdWUuDQogICAgICAgIC5EZXNjcmlwdGlvbg0KICAgICAgICAgICAgRnVuY3Rpb24gdG8gTW9kaWZ5IHJlZ2lzdHJ5IFN0cmluZyB2YWx1ZS4NCiAgICAgICAgLlBhcmFtZXRlcg0KICAgICAgICAgICAgLUhpdmUgJ0hLTE0nIC1QYXRoICdcU29mdHdhcmVcUG9saWNpZXNcTWljcm9zb2Z0XFdpbmRvd3NcU3lzdGVtJyAtTmFtZSAnQ2xlYW51cFByb2ZpbGVzJyAtVmFsdWUgJ1Rlc3QnIC1UeXBlICdTdHJpbmcnDQogICAgICAgIC5FeGFtcGxlDQogICAgICAgICAgICBTZXQtUmVnaXN0cnkgLUhpdmUgJ0hLTE0nIC1QYXRoICdcU29mdHdhcmVcUG9saWNpZXNcTWljcm9zb2Z0XFdpbmRvd3NcU3lzdGVtJyAtTmFtZSAnQ2xlYW51cFByb2ZpbGVzJyAtVmFsdWUgJ1Rlc3QnIC1UeXBlICdTdHJpbmcnDQogICAgICAgIC5JbnB1dHMNCiAgICAgICAgICAgIHN0cmluZy4NCiAgICAgICAgLk91dHB1dHMNCiAgICAgICAgICAgIE5vbmUuDQogICAgIz4NCiAgICANCiAgICBwYXJhbSAoDQogICAgICAgIFtwYXJhbWV0ZXIobWFuZGF0b3J5KV0gW3N0cmluZ10gJEhpdmUsDQogICAgICAgIFtwYXJhbWV0ZXIobWFuZGF0b3J5KV0gW3N0cmluZ10gJFBhdGgsDQogICAgICAgIFtwYXJhbWV0ZXIobWFuZGF0b3J5KV0gW3N0cmluZ10gJE5hbWUsDQogICAgICAgIFtwYXJhbWV0ZXIobWFuZGF0b3J5KV0gW3N0cmluZ10gJFZhbHVlLA0KICAgICAgICBbcGFyYW1ldGVyKG1hbmRhdG9yeSldIFtzdHJpbmddICRUeXBlDQogICAgKQ0KICAgICRyZWdQYXRoID0gKCd7MH06XHsxfScgLWYgJEhpdmUsICRQYXRoKQ0KICAgIHRyeSB7DQogICAgICAgIGlmICghKFRlc3QtUGF0aCAtUGF0aCAkcmVnUGF0aCkpIHsNCiAgICAgICAgICAgICRudWxsID0gTmV3LUl0ZW0gLVBhdGggJHJlZ1BhdGggLUZvcmNlDQogICAgICAgIH0NCiAgICAgICAgV3JpdGUtSG9zdCAiW1NldC1SZWdpc3RyeV0gQXR0ZW1wdGluZyB0byBzZXQgcmVnaXN0cnkgdmFsdWUgJE5hbWUgYXQgcmVnaXN0cnkgcGF0aCAkcmVncGF0aCBhbmQgcmVnaXN0cnkgZGF0YSAkVmFsdWUiDQogICAgICAgIE5ldy1JdGVtUHJvcGVydHkgLVBhdGggJHJlZ1BhdGggLU5hbWUgJE5hbWUgLVZhbHVlICRWYWx1ZSAtUHJvcGVydHlUeXBlICRUeXBlIC1Gb3JjZSAtRXJyb3JBY3Rpb24gQ29udGludWUgDQogICAgfQ0KICAgIGNhdGNoIFtTeXN0ZW0uSW52YWxpZE9wZXJhdGlvbkV4Y2VwdGlvbl0gew0KICAgICAgICBXcml0ZS1FcnJvciAkXy5FeGNlcHRpb24uTWVzc2FnZWBuDQogICAgICAgIFdyaXRlLUhvc3QgIltTZXQtUmVnaXN0cnldIFVuYWJsZSB0byBjcmVhdGUgcmVnaXN0cnkgdmFsdWUgJE5hbWUgYXQgcmVnaXN0cnkgcGF0aCAkcmVnUGF0aCByZWdpc3RyeSBkYXRhICRWYWx1ZSINCiAgICB9DQogICAgY2F0Y2ggew0KICAgICAgICBXcml0ZS1FcnJvciAkXy5FeGNlcHRpb24uTWVzc2FnZWBuDQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBHZXQtUmVnaXN0cnkgew0KICAgIDwjDQogICAgICAgIC5TeW5vcHNpcw0KICAgICAgICAgICAgR2V0IHJlZ2lzdHJ5IHZhbHVlLg0KICAgICAgICAuRGVzY3JpcHRpb24NCiAgICAgICAgICAgIEZ1bmN0aW9uIHRvIG9idGFpbiByZWdpc3RyeSB2YWx1ZS4NCiAgICAgICAgLlBhcmFtZXRlcg0KICAgICAgICAgICAgLUhpdmUgJ0hLTE0nIC1QYXRoICdcU29mdHdhcmVcUG9saWNpZXNcTWljcm9zb2Z0XFdpbmRvd3NcU3lzdGVtJyAtTmFtZSAnQ2xlYW51cFByb2ZpbGVzJw0KICAgICAgICAuRXhhbXBsZQ0KICAgICAgICAgICAgR2V0LVJlZ2lzdHJ5IC1IaXZlICdIS0xNJyAtUGF0aCAnXFNvZnR3YXJlXFBvbGljaWVzXE1pY3Jvc29mdFxXaW5kb3dzXFN5c3RlbScgLU5hbWUgJ0NsZWFudXBQcm9maWxlcycNCiAgICAgICAgLklucHV0cw0KICAgICAgICAgICAgc3RyaW5nDQogICAgICAgIC5PdXRwdXRzDQogICAgICAgICAgICBzdHJpbmcNCiAgICAjPg0KICAgIHBhcmFtICgNCiAgICAgICAgW3BhcmFtZXRlcihtYW5kYXRvcnkpXSBbc3RyaW5nXSAkSGl2ZSwNCiAgICAgICAgW3BhcmFtZXRlcihtYW5kYXRvcnkpXSBbc3RyaW5nXSAkUGF0aCwNCiAgICAgICAgW3BhcmFtZXRlcihtYW5kYXRvcnkpXSBbc3RyaW5nXSAkTmFtZQ0KICAgICkNCiAgICAkcmVnUGF0aCA9ICd7MH06XHsxfScgLWYgJEhpdmUsICRQYXRoDQogICAgJHJlZ1ZhbHVlcyA9IEdldC1JdGVtUHJvcGVydHkgLVBhdGggJHJlZ1BhdGggLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUNCiAgICBpZiAoISRyZWdWYWx1ZXMpDQogICAgew0KICAgICAgICByZXR1cm4gJG51bGwNCiAgICB9DQogICAgZWxzZQ0KICAgIHsNCiAgICAgICAgcmV0dXJuICRyZWdWYWx1ZXMuJE5hbWUNCiAgICB9DQp9DQoNCmZ1bmN0aW9uIFZlcmlmeU1pY3Jvc29mdEZpbGVTaWduYXR1cmUgew0KICAgIDwjDQogICAgICAgIC5TeW5vcHNpcw0KICAgICAgICAgICAgVmVyaWZpZXMgaWYgYSBmaWxlIGlzIE1pY3Jvc29mdCBTaWduZWQNCiAgICAgICAgLkRlc2NyaXB0aW9uDQogICAgICAgICAgICBDaGVja3MgaWYgYSBmaWxlIGlzIHNpZ25lZCBieSBhIGNlcnRpZmljYXRlIHdpdGggYSBtaWNyb3NvZnQgc3ViamVjdCBhbmQgcm9vdGVkIHRvIHRoZSBtaWNyb3NvZnQgcm9vdA0KICAgICAgICAuUGFyYW1ldGVyDQogICAgICAgICAgICAtRmlsZVBhdGgNCiAgICAgICAgLkV4YW1wbGUNCiAgICAgICAgICAgIFZlcmlmeU1pY3Jvc29mdEZpbGVTaWduYXR1cmUgLUZpbGVQYXRoICdDOlx0ZW1wXHRlbXAuY2FiJw0KICAgICAgICAuSW5wdXRzDQogICAgICAgICAgICBzdHJpbmcuDQogICAgICAgIC5PdXRwdXRzDQogICAgICAgICAgICBOb25lLg0KICAgICM+DQogICAgDQogICAgcGFyYW0gKA0KICAgICAgICBbcGFyYW1ldGVyKG1hbmRhdG9yeSldIFtzdHJpbmddICRGaWxlUGF0aA0KICAgICkNCiAgICANCiAgICAkc2lnbmF0dXJlID0gR2V0LUF1dGhlbnRpY29kZVNpZ25hdHVyZSAtRmlsZVBhdGggJEZpbGVQYXRoDQogICAgV3JpdGUtSG9zdCAnRGlnaXRhbCBzaWduYXR1cmUgdmFsaWRpdHk6JyAkc2lnbmF0dXJlLnN0YXR1cw0KICAgIFdyaXRlLUhvc3QgJ1NpZ25lciBDZXJ0aWZpY2F0ZSBzdWJqZWN0OicgJHNpZ25hdHVyZS5zaWduZXJDZXJ0aWZpY2F0ZS5zdWJqZWN0DQogICAgJGNlcnQgPSAkc2lnbmF0dXJlLlNpZ25lckNlcnRpZmljYXRlDQogICAgJGNoYWluID0gTmV3LU9iamVjdCAtVHlwZU5hbWUgU3lzdGVtLlNlY3VyaXR5LkNyeXB0b2dyYXBoeS5YNTA5Q2VydGlmaWNhdGVzLlg1MDlDaGFpbg0KICAgICRjaGFpbi5CdWlsZCgkY2VydCkNCiAgICAkcm9vdENlcnRTdWJqZWN0ID0gKCRjaGFpbi5DaGFpbkVsZW1lbnRzIHwgU2VsZWN0LU9iamVjdCAtTGFzdCAxKS5DZXJ0aWZpY2F0ZS5TdWJqZWN0DQogICAgV3JpdGUtSG9zdCAnUm9vdCBDZXJ0aWZpY2F0ZSBzdWJqZWN0OicgJHJvb3RDZXJ0U3ViamVjdA0KICAgIFdyaXRlLUhvc3QgJ0NoYWluIFN0YXR1czonICgkY2hhaW4uQ2hhaW5TdGF0dXMgfCBGb3JtYXQtTGlzdCkNCiAgICANCiAgICBpZiAoJGNoYWluLkNoYWluU3RhdHVzKQ0KICAgIHsNCiAgICAgICAgZm9yZWFjaCAoJGNoYWluU3RhdHVzIGluICRjaGFpbi5DaGFpblN0YXR1cykNCiAgICAgICAgew0KICAgICAgICAgICAgIyBXZSBhcmUgb25seSBva2F5IHdpdGggY2hhaW4gc3RhdHVzZXMgdGhhdCBhcmUgTm9FcnJvcigwKSBvciBOb3RUaW1lVmFsaWQoMSkNCiAgICAgICAgICAgIGlmICgoJGNoYWluU3RhdHVzLlN0YXR1cyAtZXEgMCkgLW9yICgkY2hhaW5TdGF0dXMuU3RhdHVzIC1lcSAxKSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBjb250aW51ZQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHRocm93ICJDaGFpbiBOb3QgVHJ1c3RlZC4gQ2hhaW4gU3RhdHVzOiAkY2hhaW5TdGF0dXMuU3RhdHVzIg0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KICAgIA0KICAgICMgQ2hlY2sgdGhhdCB0aGUgc2lnbmluZyBjZXJ0IGlzIHN5bnRhY3RpY2FsbHkgdmFsaWQsIGhhcyB0aGUgTWljcm9zb2Z0IHN1YmplY3QsIGlzIHJvb3RlZCB0byB0aGUgTWljcm9zb2Z0IHJvb3QgY2VydCwgYW5kIGhhcyBubyBlcnJvcnMgaW4gdGhlIGNoYWluDQogICAgaWYgKC1ub3QgKCRzaWduYXR1cmUuc3RhdHVzIC1lcSAndmFsaWQnIC1hbmQgKCRzaWduYXR1cmUuc2lnbmVyQ2VydGlmaWNhdGUuc3ViamVjdCAtZXEgJ0NOPU1pY3Jvc29mdCBDb3Jwb3JhdGlvbiwgTz1NaWNyb3NvZnQgQ29ycG9yYXRpb24sIEw9UmVkbW9uZCwgUz1XYXNoaW5ndG9uLCBDPVVTJyAtYW5kICgkcm9vdENlcnRTdWJqZWN0IC1lcSAnQ049TWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5IDIwMTEsIE89TWljcm9zb2Z0IENvcnBvcmF0aW9uLCBMPVJlZG1vbmQsIFM9V2FzaGluZ3RvbiwgQz1VUycpKSkpDQogICAgew0KICAgICAgICB0aHJvdyAiTm90IHNpZ25lZCBieSBNaWNyb3NvZnQgUFJTIENlcnQgd2l0aCBNaWNyb3NvZnQgUm9vdCINCiAgICB9DQp9DQoNCmZ1bmN0aW9uIEluc3RhbGxDbGllbnRMaWJyYXJ5DQp7DQogICAgaWYgKCRDYWJDbGllbnRMaWJyYXJ5VmVyc2lvbiAtbmUgJEN1cnJlbnRDbGllbnRMaWJyYXJ5VmVyc2lvbikgDQogICAgew0KICAgICAgICBXcml0ZS1Ib3N0ICJJbnN0YWxsaW5nIENsaWVudCBMaWJyYXJ5IFZlcnNpb24gJENhYkNsaWVudExpYnJhcnlWZXJzaW9uIg0KICAgICAgICBXcml0ZS1Ib3N0ICdDcmVhdGluZyBDbGllbnQgTGlicmFyeSB0ZW1wIGRpcmVjdG9yeScNCiAgICAgICAgJENsaWVudExpYnJhcnlUZW1wUGF0aCA9ICIkRXhwYW5kZWRDYWJEaXJlY3RvcnlcQ2xpZW50TGlicmFyeSINCiAgICAgICAgTmV3LUl0ZW0gLUZvcmNlIC1JdGVtVHlwZSBkaXJlY3RvcnkgLVBhdGggIiRFeHBhbmRlZENhYkRpcmVjdG9yeVxDbGllbnRMaWJyYXJ5Ig0KICAgICAgICBFeHBhbmQtQXJjaGl2ZSAtTGl0ZXJhbFBhdGggIiRFeHBhbmRlZENhYkRpcmVjdG9yeVxNbWRCcm9rZXIuemlwIiAtRGVzdGluYXRpb25QYXRoICRDbGllbnRMaWJyYXJ5VGVtcFBhdGgNCiAgICAgICAgJENsaWVudExpYnJhcnlJbnN0YWxsU2NyaXB0ID0gIiRDbGllbnRMaWJyYXJ5VGVtcFBhdGhcSW5zdGFsbE1tZEJyb2tlci5wczEiDQogICAgICAgICYgJENsaWVudExpYnJhcnlJbnN0YWxsU2NyaXB0IC1EaXNhYmxlVHJhbnNjcmlwdCAkdHJ1ZQ0KCQlXcml0ZS1Ib3N0ICJFeGl0IGNvZGUgZnJvbSBpbnN0YWxsaW5nIENsaWVudCBMaWJyYXJ5OiAkTEFTVEVYSVRDT0RFIiANCiAgICB9DQogICAgZWxzZQ0KICAgIHsNCiAgICAgICAgV3JpdGUtSG9zdCAnU2tpcHBpbmcgQ2xpZW50IExpYnJhcnkgSW5zdGFsbGF0aW9uJw0KICAgIH0NCn0NCg0KZnVuY3Rpb24gSW5zdGFsbE1hbmFnZW1lbnRFeHRlbnNpb24NCnsNCiAgICBpZiAoJENhYk1hbmFnZW1lbnRFeHRlbnNpb25WZXJzaW9uIC1uZSAkQ3VycmVudE1hbmFnZW1lbnRFeHRlbnNpb25WZXJzaW9uKSANCiAgICB7DQogICAgICAgICRDbWRBZ2VudExvZ1BhdGggPSAiJExvZ1BhdGhcQXV0b3BhdGNoQ2xvdWRNYW5hZ2VkRGVza3RvcEV4dGVuc2lvbkluc3RhbGwiICsgJHN0YW1wRGF0ZS5Ub0ZpbGVUaW1lVXRjKCkgKyAnLmxvZycNCiAgICAgICAgJE1hbmFnZW1lbnRFeHRlbnNpb25Nc2kgPSAiJEV4cGFuZGVkQ2FiRGlyZWN0b3J5XGNtZGV4dGVuc2lvbi5tc2kiDQogICAgICAgIFdyaXRlLUhvc3QgIkluc3RhbGxpbmcgTWFuYWdlbWVudCBFeHRlbnNpb24gVmVyc2lvbiAkQ2FiTWFuYWdlbWVudEV4dGVuc2lvblZlcnNpb24iDQogICAgICAgIHRyeQ0KICAgICAgICB7DQogICAgICAgICAgICBWZXJpZnlNaWNyb3NvZnRGaWxlU2lnbmF0dXJlIC1GaWxlUGF0aCAkTWFuYWdlbWVudEV4dGVuc2lvbk1zaQ0KICAgICAgICB9DQogICAgICAgIGNhdGNoDQogICAgICAgIHsNCiAgICAgICAgICAgIFdyaXRlLUhvc3QgJ01hbmFnZW1lbnQgRXh0ZW5zaW9uIE1TSSBpcyBub3QgdHJ1c3RlZC4gU2tpcHBpbmcnDQogICAgICAgICAgICByZXR1cm4NCiAgICAgICAgfQ0KICAgICAgICANCiAgICAgICAgIyBBdHRlbXB0IHRvIHNhdmUgY2VydGFpbiB2YWx1ZXMgZm9yIHJlaW5zdGFsbCBzY2VuYXJpb3MNCiAgICAgICAgJElvVERldmljZUlkID0gR2V0LVJlZ2lzdHJ5IC1IaXZlICdIS0xNJyAtUGF0aCAiJENtZFJlZ2lzdHJ5S2V5XFNldHRpbmdzIiAtTmFtZSAnSW9URGV2aWNlSWQnDQogICAgICAgICRJb1RIb3N0TmFtZSA9IEdldC1SZWdpc3RyeSAtSGl2ZSAnSEtMTScgLVBhdGggIiRDbWRSZWdpc3RyeUtleVxTZXR0aW5ncyIgLU5hbWUgJ0lvVEhvc3ROYW1lJw0KICAgICAgICAkRGV2aWNlUmVnaXN0cmF0aW9uVHlwZSA9IEdldC1SZWdpc3RyeSAtSGl2ZSAnSEtMTScgLVBhdGggIiRDbWRSZWdpc3RyeUtleVxTZXR0aW5ncyIgLU5hbWUgJ0RldmljZVJlZ2lzdHJhdGlvblR5cGUnDQoJCSRQYXJ0bmVycyA9IEdldC1SZWdpc3RyeSAtSGl2ZSAnSEtMTScgLVBhdGggIiRDbWRSZWdpc3RyeUtleVxTZXR0aW5ncyIgLU5hbWUgJ1BhcnRuZXJzJw0KCQkkUGFydG5lcnNOZXh0U3luY1RpbWUgPSBHZXQtUmVnaXN0cnkgLUhpdmUgJ0hLTE0nIC1QYXRoICIkQ21kUmVnaXN0cnlLZXlcU2V0dGluZ3MiIC1OYW1lICdQYXJ0bmVyc05leHRTeW5jVGltZScNCgkJDQogICAgICAgICRDbGllbnRBZ2VudE5hbWVzID0gQCgNCiAgICAgICAgICAgICJNaWNyb3NvZnQgQ01EIENsaWVudCBBZ2VudCINCiAgICAgICAgICAgICJXaW5kb3dzIENsaWVudCBBZ2VudCIsDQogICAgICAgICAgICAiTWljcm9zb2Z0IENsb3VkIE1hbmFnZWQgRGVza3RvcCBFeHRlbnNpb24iDQogICAgICAgICkNCg0KICAgICAgICBmb3JlYWNoICgkQWdlbnROYW1lIGluICRDbGllbnRBZ2VudE5hbWVzKXsNCiAgICAgICAgICAgICRhZ2VudCA9IEdldC1XbWlPYmplY3QgLWNsYXNzIFdpbjMyX1Byb2R1Y3QgLUZpbHRlciAiTmFtZT1gJyQoJEFnZW50TmFtZSlgJyINCiAgICAgICAgICAgIGlmICgkYWdlbnQpIHsNCiAgICAgICAgICAgICAgICAkcHJvZHVjdENvZGUgPSAkYWdlbnQuSWRlbnRpZnlpbmdOdW1iZXINCiAgICAgICAgICAgICAgICAkY3VycmVudFZlcnNpb24gPSBHZXQtSXRlbVByb3BlcnR5VmFsdWUgLVBhdGggIkhLTE06XFNPRlRXQVJFXE1pY3Jvc29mdFxXaW5kb3dzXEN1cnJlbnRWZXJzaW9uXFVuaW5zdGFsbFwkcHJvZHVjdENvZGUiIC1OYW1lICJEaXNwbGF5VmVyc2lvbiINCiAgICAgICAgICAgICAgICAkTVNJVW5pbnN0YWxsQXJndW1lbnRzID0gQCgNCiAgICAgICAgICAgICAgICAgICAgIi94Ig0KICAgICAgICAgICAgICAgICAgICAkcHJvZHVjdENvZGUNCiAgICAgICAgICAgICAgICAgICAgIi9xIg0KICAgICAgICAgICAgICAgICAgICAiL25vcmVzdGFydCINCiAgICAgICAgICAgICAgICApDQogICAgICAgICAgICAgICAgU3RhcnQtUHJvY2VzcyAibXNpZXhlYy5leGUiIC1Bcmd1bWVudExpc3QgJE1TSVVuaW5zdGFsbEFyZ3VtZW50cyAtV2FpdCAtTm9OZXdXaW5kb3cNCiAgICAgICAgICAgICAgICBXcml0ZS1Ib3N0ICJGaW5pc2hlZCB1bmluc3RhbGwgY29tbWFuZCBsaW5lIHdpdGggcGFyYW0gJCgkTVNJVW5pbnN0YWxsQXJndW1lbnRzKSBmb3IgYWdlbnQgYCckKCRBZ2VudE5hbWUpYCcgd2l0aCB2ZXJzaW9uICQoJGN1cnJlbnRWZXJzaW9uKSINCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KCQkNCgkJIyBSZXN0b3JlIFJlZyBWYWx1ZXMgZm9yIFVwZ3JhZGUgU2NlbmFyaW8NCgkJaWYgKCRJb1REZXZpY2VJZCkNCiAgICAgICAgew0KICAgICAgICAgICAgV3JpdGUtSG9zdCAiUmV3cml0aW5nIElvVERldmljZUlkOiAkSW9URGV2aWNlSWQiDQogICAgICAgICAgICBTZXQtUmVnaXN0cnkgLUhpdmUgJ0hLTE0nIC1QYXRoICIkQ21kUmVnaXN0cnlLZXlcU2V0dGluZ3MiIC1OYW1lICdJb1REZXZpY2VJZCcgLVZhbHVlICRJb1REZXZpY2VJZCAtVHlwZSAnU3RyaW5nJw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKCRJb1RIb3N0TmFtZSkNCiAgICAgICAgew0KICAgICAgICAgICAgV3JpdGUtSG9zdCAiUmV3cml0aW5nIElvVEhvc3ROYW1lOiAkSW9USG9zdE5hbWUiDQogICAgICAgICAgICBTZXQtUmVnaXN0cnkgLUhpdmUgJ0hLTE0nIC1QYXRoICIkQ21kUmVnaXN0cnlLZXlcU2V0dGluZ3MiIC1OYW1lICdJb1RIb3N0TmFtZScgLVZhbHVlICRJb1RIb3N0TmFtZSAtVHlwZSAnU3RyaW5nJw0KICAgICAgICB9DQoJCQ0KCQlpZiAoJERldmljZVJlZ2lzdHJhdGlvblR5cGUpDQogICAgICAgIHsNCiAgICAgICAgICAgIFdyaXRlLUhvc3QgIlJld3JpdGluZyBEZXZpY2VSZWdpc3RyYXRpb25UeXBlOiAkRGV2aWNlUmVnaXN0cmF0aW9uVHlwZSINCiAgICAgICAgICAgIFNldC1SZWdpc3RyeSAtSGl2ZSAnSEtMTScgLVBhdGggIiRDbWRSZWdpc3RyeUtleVxTZXR0aW5ncyIgLU5hbWUgJ0RldmljZVJlZ2lzdHJhdGlvblR5cGUnIC1WYWx1ZSAkRGV2aWNlUmVnaXN0cmF0aW9uVHlwZSAtVHlwZSAnU3RyaW5nJw0KICAgICAgICB9DQoJCQ0KCQlpZiAoJFBhcnRuZXJzKQ0KICAgICAgICB7DQogICAgICAgICAgICBXcml0ZS1Ib3N0ICJSZXdyaXRpbmcgUGFydG5lcnM6ICRQYXJ0bmVycyINCiAgICAgICAgICAgIFNldC1SZWdpc3RyeSAtSGl2ZSAnSEtMTScgLVBhdGggIiRDbWRSZWdpc3RyeUtleVxTZXR0aW5ncyIgLU5hbWUgJ1BhcnRuZXJzJyAtVmFsdWUgJFBhcnRuZXJzIC1UeXBlICdTdHJpbmcnDQogICAgICAgIH0NCgkJDQoJCWlmICgkUGFydG5lcnNOZXh0U3luY1RpbWUpDQogICAgICAgIHsNCiAgICAgICAgICAgIFdyaXRlLUhvc3QgIlJld3JpdGluZyBQYXJ0bmVyc05leHRTeW5jVGltZTogJFBhcnRuZXJzTmV4dFN5bmNUaW1lIg0KICAgICAgICAgICAgU2V0LVJlZ2lzdHJ5IC1IaXZlICdIS0xNJyAtUGF0aCAiJENtZFJlZ2lzdHJ5S2V5XFNldHRpbmdzIiAtTmFtZSAnUGFydG5lcnNOZXh0U3luY1RpbWUnIC1WYWx1ZSAkUGFydG5lcnNOZXh0U3luY1RpbWUgLVR5cGUgJ1N0cmluZycNCiAgICAgICAgfQ0KCQkNCiAgICAgICAgJE1TSUluc3RhbGxBcmd1bWVudHMgPSBAKA0KICAgICAgICAgICAgIi9pIg0KICAgICAgICAgICAgIiRNYW5hZ2VtZW50RXh0ZW5zaW9uTXNpIg0KICAgICAgICAgICAgIlNWQ0VOVj0kQ2FiTWFuYWdlbWVudEV4dGVuc2lvbkVudmlyb25tZW50Ig0KICAgICAgICAgICAgIi9xYiEiDQogICAgICAgICAgICAiL2wqdiAkQ21kQWdlbnRMb2dQYXRoIg0KICAgICAgICAgICAgIi9ub3Jlc3RhcnQiDQogICAgICAgICkNCiAgICAgICAgU3RhcnQtUHJvY2VzcyAibXNpZXhlYy5leGUiIC1Bcmd1bWVudExpc3QgJE1TSUluc3RhbGxBcmd1bWVudHMgLVdhaXQgLU5vTmV3V2luZG93DQogICAgICAgIA0KICAgIH0NCiAgICBlbHNlDQogICAgew0KICAgICAgICBXcml0ZS1Ib3N0ICdTa2lwcGluZyBNYW5hZ2VtZW50IEV4dGVuc2lvbiBJbnN0YWxsYXRpb24nDQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBDbGVhbnVwIHsNCiAgICA8Iw0KICAgICAgICAuU3lub3BzaXMNCiAgICAgICAgICAgIENsZWFucyB1cCBmaWxlcywgZGlyZWN0b3JpZXMsIGFuZCBzY2hlZHVsZWQgdGFza3MgYXNzb2NpYXRlZCB3aXRoIHRoaXMgaW5zdGFsbCBwcm9jZXNzIGV4Y2VwdCB0aGlzIHNjcmlwdA0KICAgICAgICAuRGVzY3JpcHRpb24NCiAgICAgICAgICAgIENsZWFucyB1cCBmaWxlcywgZGlyZWN0b3JpZXMsIGFuZCBzY2hlZHVsZWQgdGFza3MgYXNzb2NpYXRlZCB3aXRoIHRoaXMgaW5zdGFsbCBwcm9jZXNzIGV4Y2VwdCB0aGlzIHNjcmlwdA0KICAgICAgICAuUGFyYW1ldGVyDQogICAgICAgICAgICAtU3VjY2Vzc2Z1bFJ1bg0KICAgICAgICAuRXhhbXBsZQ0KICAgICAgICAgICAgQ2xlYW51cCAtU3VjY2Vzc2Z1bFJ1biAkdHJ1ZQ0KICAgICAgICAuSW5wdXRzDQogICAgICAgICAgICBib29sZWFuLg0KICAgICAgICAuT3V0cHV0cw0KICAgICAgICAgICAgTm9uZS4NCiAgICAjPiAgDQogICAgcGFyYW0gKA0KICAgICAgICBbYm9vbGVhbl0gJFN1Y2Nlc3NmdWxSdW4gPSAkZmFsc2UNCiAgICApDQogICAgDQogICAgY2QgJFBTU2NyaXB0Um9vdA0KICAgIGlmIChUZXN0LVBhdGggJENhYkRpcmVjdG9yeSkgDQogICAgew0KICAgICAgICBXcml0ZS1Ib3N0ICdSZW1vdmluZyBDYWIgZGlyZWN0b3J5Jw0KICAgICAgICBSZW1vdmUtSXRlbSAtTGl0ZXJhbFBhdGggJENhYkRpcmVjdG9yeSAtRm9yY2UgLVJlY3Vyc2UNCiAgICB9DQogICAgDQogICAgaWYgKCRTdWNjZXNzZnVsUnVuKQ0KICAgIHsNCiAgICAgICAgIyBDbGVhbnVwIHNjaGVkdWxlZCB0YXNrIGlmIGl0IGV4aXN0cw0KICAgICAgICBVbnJlZ2lzdGVyLVNjaGVkdWxlZFRhc2sgLVRhc2tOYW1lICdBdXRvcGF0Y2ggQ2xpZW50IFNldHVwIEluc3RhbGxlcicgLUNvbmZpcm06JGZhbHNlIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlDQogICAgICAgIFdyaXRlLUhvc3QgIltTVUNDRVNTRlVMX0FVVE9QQVRDSF9DTElFTlRfU0VUVVBdIg0KICAgIH0NCiAgICBlbHNlDQogICAgew0KICAgICAgICBXcml0ZS1Ib3N0ICJbRkFJTEVEX0FVVE9QQVRDSF9DTElFTlRfU0VUVVBdIg0KICAgIH0NCiAgICANCiAgICBpZiAoLW5vdCAkRGlzYWJsZVRyYW5zY3JpcHQpDQogICAgeyANCiAgICAgICAgIyBTdG9wIExvZ2dpbmcNCiAgICAgICAgU3RvcC1UcmFuc2NyaXB0IC1WZXJib3NlDQogICAgfQ0KfQ0KDQojIElmIFBvd2Vyc2hlbGwgaXMgcnVubmluZyB0aGUgMzItYml0IHZlcnNpb24gb24gYSA2NC1iaXQgbWFjaGluZSwgd2UgbmVlZCB0byBmb3JjZSBwb3dlcnNoZWxsIHRvIHJ1biBpbg0KIyA2NC1iaXQgbW9kZS4NCmlmICgkZW52OlBST0NFU1NPUl9BUkNISVRFVzY0MzIgLWVxICJBTUQ2NCIpIHsNCiAgICBpZiAoJG15SW52b2NhdGlvbi5MaW5lKSB7DQogICAgICAgICYiJGVudjpXSU5ESVJcc3lzbmF0aXZlXHdpbmRvd3Nwb3dlcnNoZWxsXHYxLjBccG93ZXJzaGVsbC5leGUiIC1Ob25JbnRlcmFjdGl2ZSAtTm9Qcm9maWxlICRteUludm9jYXRpb24uTGluZQ0KICAgIH0NCgllbHNlDQoJew0KICAgICAgICAmIiRlbnY6V0lORElSXHN5c25hdGl2ZVx3aW5kb3dzcG93ZXJzaGVsbFx2MS4wXHBvd2Vyc2hlbGwuZXhlIiAtTm9uSW50ZXJhY3RpdmUgLU5vUHJvZmlsZSAtZmlsZSAiJCgkbXlJbnZvY2F0aW9uLkludm9jYXRpb25OYW1lKSIgJGFyZ3MNCiAgICB9DQogICAgZXhpdCAkbGFzdGV4aXRjb2RlDQp9DQoNCg0KJENhYkRpcmVjdG9yeSA9ICIkZW52OlN5c3RlbURyaXZlXFByb2dyYW1EYXRhXE1pY3Jvc29mdFxBdXRvcGF0Y2hTZXR1cCINCiRMb2dQYXRoID0gIiRFbnY6d2luZGlyXGNjbVxsb2dzIg0KJExvZ1ByZWZpeCA9ICIkTG9nUGF0aFxBdXRvcGF0Y2hDbGllbnRTZXR1cEluc3RhbGxUYXNrIg0KJHN0YW1wRGF0ZSA9IEdldC1EYXRlDQojIFN0YXJ0IExvZ2dpbmcNCmlmICgtbm90ICREaXNhYmxlVHJhbnNjcmlwdCkNCnsNCiAgICAkbG9nRmlsZSA9ICRMb2dQcmVmaXggKyAkc3RhbXBEYXRlLlRvRmlsZVRpbWVVdGMoKSArICcubG9nJw0KICAgIFN0YXJ0LVRyYW5zY3JpcHQgLVBhdGggJGxvZ0ZpbGUNCn0NCg0KIyBSZW1vdmUgQXV0b3BhdGNoIEluc3RhbGwgbG9ncyB0aGF0IGFyZSA3KyBkYXlzIG9sZA0KJGN1dE9mZkRhdGUgPSAoR2V0LURhdGUpLkFkZERheXMoLTcpLlRvRmlsZVRpbWVVdGMoKQ0KZm9yZWFjaCAoJGxvZ0ZpbGUgaW4gR2V0LUNoaWxkSXRlbSAkTG9nUGF0aCkgew0KICAgIGlmICgkbG9nRmlsZS5OYW1lLlN0YXJ0c1dpdGgoJExvZ1ByZWZpeCkgLWFuZCAkbG9nRmlsZS5FeHRlbnNpb24uRXF1YWxzKCcubG9nJykpIHsNCiAgICAgICAgJGxvZ0RhdGVTdHIgPSAkbG9nRmlsZS5OYW1lLlN1YnN0cmluZygkTG9nUHJlZml4Lkxlbmd0aCkNCiAgICAgICAgJGxvZ0RhdGVTdHIgPSAkbG9nRGF0ZVN0ci5TdWJzdHJpbmcoMCwgJGxvZ0RhdGVTdHIuSW5kZXhPZignLicpKQ0KICAgICAgICAkbG9nRGF0ZSA9IDANCiAgICAgICAgaWYgKFt1aW50NjRdOjpUcnlQYXJzZSgkbG9nRGF0ZVN0ciwgW3JlZl0kbG9nRGF0ZSkgLWFuZCAkbG9nRGF0ZSAtbHQgJGN1dE9mZkRhdGUpIHsNCiAgICAgICAgICAgIFJlbW92ZS1JdGVtICgnezB9ezF9JyAtZiAkTG9nUGF0aCwgJGxvZ0ZpbGUpDQogICAgICAgICAgICBXcml0ZS1Ib3N0ICJSZW1vdmVkIG9sZCBsb2cgZmlsZSAkbG9nRmlsZSINCiAgICAgICAgfQ0KICAgIH0NCn0NCg0KJE1tZFJlZ2lzdHJ5S2V5ID0gJ1xTb2Z0d2FyZVxNaWNyb3NvZnRcTU1EJw0KJENtZFJlZ2lzdHJ5S2V5ID0gJ1NvZnR3YXJlXE1pY3Jvc29mdFxDbG91ZE1hbmFnZW1lbnREZXNrdG9wXEV4dGVuc2lvbicNCg0KI0NoZWNrIEluc3RhbGxlZCB2ZXJzaW9ucyBmb3IgQ2xpZW50IExpYnJhcnkgYW5kIE1hbmFnZW1lbnQgRXh0ZW5zaW9uDQokQ3VycmVudENsaWVudExpYnJhcnlWZXJzaW9uID0gR2V0LVJlZ2lzdHJ5IC1IaXZlICdIS0xNJyAtUGF0aCAiJE1tZFJlZ2lzdHJ5S2V5XEJyb2tlciIgLU5hbWUgJ1ZlcnNpb24nDQokQ3VycmVudE1hbmFnZW1lbnRFeHRlbnNpb25WZXJzaW9uID0gR2V0LVJlZ2lzdHJ5IC1IaXZlICdIS0xNJyAtUGF0aCAiJENtZFJlZ2lzdHJ5S2V5XFByb2R1Y3RJbmZvIiAtTmFtZSAnVmVyc2lvbicNCldyaXRlLUhvc3QgIkluc3RhbGxlZCBDbGllbnQgTGlicmFyeSBWZXJzaW9uOiAkQ3VycmVudENsaWVudExpYnJhcnlWZXJzaW9uOyBJbnN0YWxsZWQgTWFuYWdlbWVudCBFeHRlbnNpb24gVmVyaXNvbjogJEN1cnJlbnRNYW5hZ2VtZW50RXh0ZW5zaW9uVmVyc2lvbiINCg0KaWYgKCgkQ2xpZW50TGlicmFyeVZlcnNpb24gLWVxICRDdXJyZW50Q2xpZW50TGlicmFyeVZlcnNpb24pIC1hbmQgKCRDbG91ZE1hbmFnZW1lbnRFeHRlbnNpb25WZXJzaW9uIC1lcSAkQ3VycmVudE1hbmFnZW1lbnRFeHRlbnNpb25WZXJzaW9uKSkNCnsNCiAgICBXcml0ZS1Ib3N0ICdDbGllbnQgTGlicmFyeSBhbmQgTWFuYWdlbWVudCBFeHRlbnNpb24gYXJlIHVwLXRvLWRhdGUuIEV4aXRpbmcgSW5zdGFsbGF0aW9uJw0KICAgIENsZWFudXAgLVN1Y2Nlc3NmdWxSdW4gJHRydWUNCiAgICBleGl0IDANCn0NCg0KJEV4cGFuZGVkQ2FiRGlyZWN0b3J5ID0gIiRlbnY6U3lzdGVtRHJpdmVcUHJvZ3JhbURhdGFcTWljcm9zb2Z0XEF1dG9wYXRjaFNldHVwXEZpbGVzIg0KJENhYkZpbGUgPSAiJENhYkRpcmVjdG9yeVxBdXRvcGF0Y2hTZXR1cFBhY2thZ2UuY2FiIg0KDQppZiAoVGVzdC1QYXRoICRDYWJEaXJlY3RvcnkpIA0Kew0KICAgIFdyaXRlLUhvc3QgJ1JlbW92aW5nIG9sZCBDYWIgZGlyZWN0b3J5Jw0KICAgIFJlbW92ZS1JdGVtIC1MaXRlcmFsUGF0aCAkQ2FiRGlyZWN0b3J5IC1Gb3JjZSAtUmVjdXJzZQ0KfQ0KV3JpdGUtSG9zdCAnQ3JlYXRpbmcgQ2FiIGRpcmVjdG9yeScNCk5ldy1JdGVtIC1Gb3JjZSAtSXRlbVR5cGUgZGlyZWN0b3J5IC1QYXRoICRDYWJEaXJlY3RvcnkNCg0KV3JpdGUtSG9zdCAiRG93bmxvYWRpbmcgQ2FiIGZyb20gJGNhYkRvd25sb2FkVXJpIg0KdHJ5IA0Kew0KICAgIEludm9rZS1XZWJSZXF1ZXN0IC1VUkkgJGNhYkRvd25sb2FkVXJpIC1PdXRGaWxlICRDYWJGaWxlDQp9DQpjYXRjaA0Kew0KICAgIFdyaXRlLUhvc3QgJF8uRXhjZXB0aW9uLk1lc3NhZ2Vgbg0KICAgIFdyaXRlLUhvc3QgIkZhaWxlZCB0byBkb3dubG9hZCBjYWIgZnJvbSAkY2FiRG93bmxvYWRVcmkiDQp9DQoNCmlmICgtbm90IChUZXN0LVBhdGggJENhYkZpbGUgLVBhdGhUeXBlIExlYWYpKQ0Kew0KICAgIFdyaXRlLUhvc3QgIkRvd25sb2FkaW5nIENhYiBmcm9tICRjYWJEb3dubG9hZFVyaUJhY2t1cCINCiAgICB0cnkgDQogICAgew0KICAgICAgICBJbnZva2UtV2ViUmVxdWVzdCAtVVJJICRjYWJEb3dubG9hZFVyaUJhY2t1cCAtT3V0RmlsZSAkQ2FiRmlsZQ0KICAgIH0NCiAgICBjYXRjaA0KICAgIHsNCiAgICAgICAgV3JpdGUtSG9zdCAkXy5FeGNlcHRpb24uTWVzc2FnZWBuDQogICAgICAgIFdyaXRlLUhvc3QgIkZhaWxlZCB0byBkb3dubG9hZCBjYWIgZnJvbSAkY2FiRG93bmxvYWRVcmlCYWNrdXAiDQogICAgICAgIENsZWFudXANCiAgICAgICAgZXhpdCAyDQogICAgfQ0KfQ0KDQojVmVyaWZ5IG1pY3Jvc29mdCBzaWduYXR1cmUgb24gY2FiDQp0cnkNCnsNCiAgICBWZXJpZnlNaWNyb3NvZnRGaWxlU2lnbmF0dXJlIC1GaWxlUGF0aCAkQ2FiRmlsZQ0KfQ0KY2F0Y2gNCnsNCiAgICBXcml0ZS1Ib3N0ICdDYWIgaXMgbm90IHRydXN0ZWQuIEV4aXRpbmcnDQogICAgQ2xlYW51cA0KICAgIGV4aXQgMw0KfQ0KDQpXcml0ZS1Ib3N0ICdDcmVhdGluZyBleHBhbmRlZCBDYWIgZGlyZWN0b3J5Jw0KTmV3LUl0ZW0gLUZvcmNlIC1JdGVtVHlwZSBkaXJlY3RvcnkgLVBhdGggJEV4cGFuZGVkQ2FiRGlyZWN0b3J5DQoNCldyaXRlLUhvc3QgJ0V4dHJhY3QgY2FiJw0KZXhwYW5kLmV4ZSAkQ2FiRmlsZSAtRjoqICRFeHBhbmRlZENhYkRpcmVjdG9yeQ0KDQpXcml0ZS1Ib3N0ICdQYXJzZSBjb25maWcgZmlsZScNCiRDb25maWdGaWxlTmFtZSA9ICIkRXhwYW5kZWRDYWJEaXJlY3RvcnlcY29uZmlnLmpzb24iDQokY29uZmlnUHJvcGVydGllcyA9IEB7fQ0KJGpzb24gPSBHZXQtQ29udGVudCAkQ29uZmlnRmlsZU5hbWUgfCBPdXQtU3RyaW5nDQooQ29udmVydEZyb20tSnNvbiAkanNvbikucHNvYmplY3QucHJvcGVydGllcyB8IEZvcmVhY2ggeyAkY29uZmlnUHJvcGVydGllc1skXy5OYW1lXSA9ICRfLlZhbHVlIH0NCiRDYWJNYW5hZ2VtZW50RXh0ZW5zaW9uRW52aXJvbm1lbnQgPSAkY29uZmlnUHJvcGVydGllc1snTWFuYWdlbWVudEV4dGVuc2lvbkVudmlyb25tZW50J10NCiRDYWJDbGllbnRMaWJyYXJ5VmVyc2lvbiA9ICRjb25maWdQcm9wZXJ0aWVzWydDbGllbnRMaWJyYXJ5VmVyc2lvbiddDQokQ2FiTWFuYWdlbWVudEV4dGVuc2lvblZlcnNpb24gPSAkY29uZmlnUHJvcGVydGllc1snTWFuYWdlbWVudEV4dGVuc2lvblZlcnNpb24nXQ0KV3JpdGUtSG9zdCAiQ2FiIENsaWVudCBMaWJyYXJ5IFZlcnNpb246ICRDYWJDbGllbnRMaWJyYXJ5VmVyc2lvbjsgQ2FiIE1hbmFnZW1lbnQgRXh0ZW5zaW9uIFZlcnNpb246ICRDYWJNYW5hZ2VtZW50RXh0ZW5zaW9uVmVyc2lvbiINCg0KIyBTZXR0aW5nIEF1dG9wYXRjaCByZWdpc3RyeSB2YWx1ZQ0KU2V0LVJlZ2lzdHJ5IC1IaXZlICdIS0xNJyAtUGF0aCAiJE1tZFJlZ2lzdHJ5S2V5XEJyb2tlciIgLU5hbWUgJ0F1dG9wYXRjaCcgLVZhbHVlICcxJyAtVHlwZSAnRHdvcmQnDQoNCkluc3RhbGxDbGllbnRMaWJyYXJ5DQpJbnN0YWxsTWFuYWdlbWVudEV4dGVuc2lvbg0KDQojIFZlcmlmeSBJbnN0YWxsYXRpb25zDQokTmV3Q2xpZW50TGlicmFyeVZlcnNpb24gPSBHZXQtUmVnaXN0cnkgLUhpdmUgJ0hLTE0nIC1QYXRoICIkTW1kUmVnaXN0cnlLZXlcQnJva2VyIiAtTmFtZSAnVmVyc2lvbicNCiROZXdNYW5hZ2VtZW50RXh0ZW5zaW9uVmVyc2lvbiA9IEdldC1SZWdpc3RyeSAtSGl2ZSAnSEtMTScgLVBhdGggIiRDbWRSZWdpc3RyeUtleVxQcm9kdWN0SW5mbyIgLU5hbWUgJ1ZlcnNpb24nDQppZiAoKCRDbGllbnRMaWJyYXJ5VmVyc2lvbiAtZXEgJE5ld0NsaWVudExpYnJhcnlWZXJzaW9uKSAtYW5kICgkQ2xvdWRNYW5hZ2VtZW50RXh0ZW5zaW9uVmVyc2lvbiAtZXEgJE5ld01hbmFnZW1lbnRFeHRlbnNpb25WZXJzaW9uKSkNCnsNCiAgICBXcml0ZS1Ib3N0ICdDbGllbnQgTGlicmFyeSBhbmQgTWFuYWdlbWVudCBFeHRlbnNpb24gaGF2ZSBpbnN0YWxsZWQgc3VjY2Vzc2Z1bGx5LiBFeGl0aW5nIEluc3RhbGxhdGlvbicNCiAgICBDbGVhbnVwIC1TdWNjZXNzZnVsUnVuICR0cnVlDQogICAgZXhpdCAwDQp9DQplbHNlDQp7DQogICAgV3JpdGUtSG9zdCAnQ2xpZW50IExpYnJhcnkgYW5kIE1hbmFnZW1lbnQgRXh0ZW5zaW9uIGhhdmUgbm90IGluc3RhbGxlZCBzdWNjZXNzZnVsbHkuJw0KICAgIFdyaXRlLUhvc3QgIkV4cGVjdGVkIENsaWVudCBMaWJyYXJ5IFZlcnNpb246ICRDbGllbnRMaWJyYXJ5VmVyc2lvbjsgSW5zdGFsbGVkIENsaWVudCBMaWJyYXJ5IFZlcnNpb246ICROZXdDbGllbnRMaWJyYXJ5VmVyc2lvbi4iDQogICAgV3JpdGUtSG9zdCAiRXhwZWN0ZWQgTWFuYWdlbWVudCBFeHRlbnNpb24gVmVyc2lvbjogJENhYk1hbmFnZW1lbnRFeHRlbnNpb25WZXJzaW9uOyBJbnN0YWxsZWQgTWFuYWdlbWVudCBFeHRlbnNpb24gVmVyc2lvbjogJE5ld01hbmFnZW1lbnRFeHRlbnNpb25WZXJzaW9uLiINCiAgICBDbGVhbnVwDQogICAgZXhpdCA0DQp9DQojIFNJRyAjIEJlZ2luIHNpZ25hdHVyZSBibG9jaw0KIyBNSUlub3dZSktvWklodmNOQVFjQ29JSW5sRENDSjVBQ0FRRXhEekFOQmdsZ2hrZ0JaUU1FQWdFRkFEQjVCZ29yDQojIEJnRUVBWUkzQWdFRW9Hc3dhVEEwQmdvckJnRUVBWUkzQWdFZU1DWUNBd0VBQUFRUUg4dzdZRmxMQ0U2M0pOTEcNCiMgS1g3elVRSUJBQUlCQUFJQkFBSUJBQUlCQURBeE1BMEdDV0NHU0FGbEF3UUNBUVVBQkNBaFBwTkJKRnp2VElmdg0KIyBZUE1CcFhGWU90LzUvL1VJV0UrRE85MHVkVzllM2FDQ0RYWXdnZ1gwTUlJRDNLQURBZ0VDQWhNekFBQUN5N2QxDQojIE9mc0NjVUkyQUFBQUFBTExNQTBHQ1NxR1NJYjNEUUVCQ3dVQU1INHhDekFKQmdOVkJBWVRBbFZUTVJNd0VRWUQNCiMgVlFRSUV3cFhZWE5vYVc1bmRHOXVNUkF3RGdZRFZRUUhFd2RTWldSdGIyNWtNUjR3SEFZRFZRUUtFeFZOYVdOeQ0KIyBiM052Wm5RZ1EyOXljRzl5WVhScGIyNHhLREFtQmdOVkJBTVRIMDFwWTNKdmMyOW1kQ0JEYjJSbElGTnBaMjVwDQojIGJtY2dVRU5CSURJd01URXdIaGNOTWpJd05URXlNakEwTlRVNVdoY05Nak13TlRFeE1qQTBOVFU1V2pCME1Rc3cNCiMgQ1FZRFZRUUdFd0pWVXpFVE1CRUdBMVVFQ0JNS1YyRnphR2x1WjNSdmJqRVFNQTRHQTFVRUJ4TUhVbVZrYlc5dQ0KIyBaREVlTUJ3R0ExVUVDaE1WVFdsamNtOXpiMlowSUVOdmNuQnZjbUYwYVc5dU1SNHdIQVlEVlFRREV4Vk5hV055DQojIGIzTnZablFnUTI5eWNHOXlZWFJwYjI0d2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUINCiMgQVFDM3NOMFdjZEdwR1hQWkliNWlOZkZCMHhaOHJuSnZZbnhENlVmMkJIWGdscGJURWZvZSttTy8vb0xXa1J4QQ0KIyB3cHBkaXRzU1ZPRDBvZ2xLYnRuaDlXcDJEQVJMY3hiR2FXNFlhbk9XU0IxTHlMUnBIbm5RNVBPbGgyVTV0cmc0DQojIDNnUWp2bE5abFFCM2xMK3pyUHRiTnZNQTdFMFdrbW8rWjZZRm5zZjdhZWsrS0d6YUdib0FlRk80dUtaalFYWTUNCiMgUm1NekU3MEJ3YXo3aHZBMDVqRFVSZFJLSDBpLzF5Szk2VER1UDdKeVJGTE92QTNVWE5XejAwUjl3N3BwTURjTg0KIyBsWHRybWJQaWd2M3hFOUZmcGZtSlJ0aU9aUUtkNzNLNzJXdWptajYvU3UzK0RCVHBPcTdOZ2RudFcybEpmWDNYDQojIGE2b2U0RjlQazl4Umhrd0hzazdKdTlFL0FnTUJBQUdqZ2dGek1JSUJiekFmQmdOVkhTVUVHREFXQmdvckJnRUUNCiMgQVlJM1RBZ0JCZ2dyQmdFRkJRY0RBekFkQmdOVkhRNEVGZ1FVcmcvbnQvZ2orQkJMZDFqWldZaG9rN3Y1L3c0dw0KIyBSUVlEVlIwUkJENHdQS1E2TURneEhqQWNCZ05WQkFzVEZVMXBZM0p2YzI5bWRDQkRiM0p3YjNKaGRHbHZiakVXDQojIE1CUUdBMVVFQlJNTk1qTXdNREV5S3pRM01EVXlPREFmQmdOVkhTTUVHREFXZ0JSSWJtVGxVQVhUZ3FvWE56Y2kNCiMgdFcyb3luVUNsVEJVQmdOVkhSOEVUVEJMTUVtZ1I2QkZoa05vZEhSd09pOHZkM2QzTG0xcFkzSnZjMjltZEM1ag0KIyBiMjB2Y0d0cGIzQnpMMk55YkM5TmFXTkRiMlJUYVdkUVEwRXlNREV4WHpJd01URXRNRGN0TURndVkzSnNNR0VHDQojIENDc0dBUVVGQndFQkJGVXdVekJSQmdnckJnRUZCUWN3QW9aRmFIUjBjRG92TDNkM2R5NXRhV055YjNOdlpuUXUNCiMgWTI5dEwzQnJhVzl3Y3k5alpYSjBjeTlOYVdORGIyUlRhV2RRUTBFeU1ERXhYekl3TVRFdE1EY3RNRGd1WTNKMA0KIyBNQXdHQTFVZEV3RUIvd1FDTUFBd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dJQkFKTDV0NnBWaklSbFE4ajRkQUZKDQojIFpuTWtlM3JSSGVRRE9QRnhzd000N0hSdmdRYTJFMWplYTJhWWlNazFXbWRxV25ZdzFiYWw0SXpSbFNWZjRjemYNCiMgengydmpPSU9pYUdsbFcyQnlIa2ZLQXBuZ096Sm1BUThGMTV4U0hQUnZOTW12cEMzUEZMdktNZjN5NVN5UEp4aA0KIyA5MjJUVHEwcTVlcEp2MVNnWkRXbFVsSEwvRXgxblg4a3pCUmhIdmM2RDZGNWxhK29BTzRBM28vWkMwNU9PZ200DQojIEVKeFpQOU1xVWk1aWlkMmR3NEpnL0h2dERwQ2NMajFHTEloQ0RhZWJLZWdhakNKbE1oaHhuRFhyR0ZMSmZYOGoNCiMgN2s3TFV2clpEc1FuaUpaM0Q2NksrM1NaVExodndLN2RNR1ZGdVVVSlVmRGlmcmxDVGpLRzlteHNQRGxsZnljaw0KIyA0ekduUlp2OEp3OVJnRTF6QWdoblUxNEwwdlZVTk96aS80YkU3d0lzaVJ5SWNDY1ZvWFJuZUJBM24vZnJMWHZkDQojIGpEc2JiMmxwR3U3OCtzMXpiTzVOMGJoSFdxNGo1V011dHJzcEJ4RWhxRzJQU0JqQzVZcGkramh0ZnUzK3g3Nk4NCiMgbUJ2c3lLdXh4OStIbS9BTG5sekt4cjRLeU1SMy96NElSTXpBMVF5cHBOazY1VWkrakIxNGcrdzR2b2xlMzNNMQ0KIyBwVnFWY2tybVNlYlVrbWpuQ3NoQ2lIMTJJRmdIWkY3Z1J3RTRZWnJKN1FqeFplb1pxSGFLc1FMUk1wNjUzYmVCDQojIGZIZmV2YTl6SlBoQlNkVmNDVzd4OXEwYzJIVlBMSkhYOVlDVVU3MTRJK3F0THBER3JkYlp4RDltaWtQcUwvVG8NCiMgLzFsRFowY2g4RnRlUGhNRTdob3V1b1BjTUlJSGVqQ0NCV0tnQXdJQkFnSUtZUTZRMGdBQUFBQUFBekFOQmdrcQ0KIyBoa2lHOXcwQkFRc0ZBRENCaURFTE1Ba0dBMVVFQmhNQ1ZWTXhFekFSQmdOVkJBZ1RDbGRoYzJocGJtZDBiMjR4DQojIEVEQU9CZ05WQkFjVEIxSmxaRzF2Ym1ReEhqQWNCZ05WQkFvVEZVMXBZM0p2YzI5bWRDQkRiM0p3YjNKaGRHbHYNCiMgYmpFeU1EQUdBMVVFQXhNcFRXbGpjbTl6YjJaMElGSnZiM1FnUTJWeWRHbG1hV05oZEdVZ1FYVjBhRzl5YVhSNQ0KIyBJREl3TVRFd0hoY05NVEV3TnpBNE1qQTFPVEE1V2hjTk1qWXdOekE0TWpFd09UQTVXakIrTVFzd0NRWURWUVFHDQojIEV3SlZVekVUTUJFR0ExVUVDQk1LVjJGemFHbHVaM1J2YmpFUU1BNEdBMVVFQnhNSFVtVmtiVzl1WkRFZU1Cd0cNCiMgQTFVRUNoTVZUV2xqY205emIyWjBJRU52Y25CdmNtRjBhVzl1TVNnd0pnWURWUVFERXg5TmFXTnliM052Wm5RZw0KIyBRMjlrWlNCVGFXZHVhVzVuSUZCRFFTQXlNREV4TUlJQ0lqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FnOEFNSUlDDQojIENnS0NBZ0VBcS9ENmNoQWNMcTNZYnFxQ0VFMDB1dksyV0NHZlFoc3FhK2xhVUtxNEJqZ2FCRW02ZjhNTUh0MDMNCiMgYThZUzJBdndPTUtaQnJESU9kVUJGREZDMDRrTmVXU0hmcFJnSkd5dm5rbWM2V2hlMHQrYlU3SUtMTU92MmFrcg0KIyBybm9KcjllV1djcGdHZ1hwWm5ib01sSW1FaS9ucXdoUXo3TkV0MTNZeEM0RGRhdG84OHR0OHpwY29SYjBScnJnDQojIE9HU3NibVExZUthZ1l3OHQwMENUK09QZUJ3M1ZYSG1sU1NubkRiNmdFM2UrbEQzdisrTXJXaEFmVFZZb29ucHkNCiMgNEJJNnQwbGUyTzN0UTVHRDJYdXllNFliMlQ2eGpGM29pVStFR3ZLaEwxbmtrRHN0cmpOWXhiYysvakxUc3dNOQ0KIyBzYkt2a2poKzBwMkFMUFZPVnBFaE5TWERPVzVrZjFPNm5BK3RHU09FeS9TNkE0YU45MS93MEZLL2pKU0h2TUFoDQojIGRDVmZHQ2kyekNjb09DV1lPVW8yejN5eGtxNGNJNmVwWnV4aEgycmhLRW1kWDRqaUpWM1RJVXMrVXNTMVZ6OGsNCiMgQS9EUmVsc3YxU1BqY0YwUFVVWjNzL2dBNGJ5c0FvSmYyOEFWczcwYjFGVkw1em1oRCtralNid1l1RVI4UmVUQg0KIyB3M0o2NEhMbkpOKy9ScG5GNzhJY1Y5dURqZXhOU1RDbnE0N2Y3RnVmci96ZHNHYml3WmVCZSszVzdVdm5TU21uDQojIEV5aW1wMzFuZ09hS1luaGZzaStFMTFlY1hMOTNLQ2p4N1czREtJOHNqMEEzVDhIaGhVU0p4QWxNeGRTbFF5OTANCiMgbGZkdStIZ2dXQ3dUWFdDVm1qNVBNNFRhc0lnWDNwNU85SmF3dkVhZ2JKalM0TmFJakFzQ0F3RUFBYU9DQWUwdw0KIyBnZ0hwTUJBR0NTc0dBUVFCZ2pjVkFRUURBZ0VBTUIwR0ExVWREZ1FXQkJSSWJtVGxVQVhUZ3FvWE56Y2l0VzJvDQojIHluVUNsVEFaQmdrckJnRUVBWUkzRkFJRURCNEtBRk1BZFFCaUFFTUFRVEFMQmdOVkhROEVCQU1DQVlZd0R3WUQNCiMgVlIwVEFRSC9CQVV3QXdFQi96QWZCZ05WSFNNRUdEQVdnQlJ5TFRvQ01aQkR1UlFGVHVIcXA4Y3gwU09KTkRCYQ0KIyBCZ05WSFI4RVV6QlJNRStnVGFCTGhrbG9kSFJ3T2k4dlkzSnNMbTFwWTNKdmMyOW1kQzVqYjIwdmNHdHBMMk55DQojIGJDOXdjbTlrZFdOMGN5OU5hV05TYjI5RFpYSkJkWFF5TURFeFh6SXdNVEZmTUROZk1qSXVZM0pzTUY0R0NDc0cNCiMgQVFVRkJ3RUJCRkl3VURCT0JnZ3JCZ0VGQlFjd0FvWkNhSFIwY0RvdkwzZDNkeTV0YVdOeWIzTnZablF1WTI5dA0KIyBMM0JyYVM5alpYSjBjeTlOYVdOU2IyOURaWEpCZFhReU1ERXhYekl3TVRGZk1ETmZNakl1WTNKME1JR2ZCZ05WDQojIEhTQUVnWmN3Z1pRd2daRUdDU3NHQVFRQmdqY3VBekNCZ3pBL0JnZ3JCZ0VGQlFjQ0FSWXphSFIwY0RvdkwzZDMNCiMgZHk1dGFXTnliM052Wm5RdVkyOXRMM0JyYVc5d2N5OWtiMk56TDNCeWFXMWhjbmxqY0hNdWFIUnRNRUFHQ0NzRw0KIyBBUVVGQndJQ01EUWVNaUFkQUV3QVpRQm5BR0VBYkFCZkFIQUFid0JzQUdrQVl3QjVBRjhBY3dCMEFHRUFkQUJsDQojIEFHMEFaUUJ1QUhRQUxpQWRNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUNBUUJuOG9hbG1PQlVlUm91MDloMFp5S2INCiMgQzVZUjRXT1NtVUtXZmRKNURKREJaVjh1TEQ3NHczTFJiWVArdmovb0Nzbzd2MGVwby9OcDIyTy9JaldsbDExbA0KIyBoSkI5aTBaUVZkZ01rbnpTR2tzYzh6eENpMUxRc1AxcjR6NEhMaW1iNWowYnBkUzFIWGVVT2VMcFpNbEVQWGg2DQojIEkvTVRmYWFRZElPTjlNc21Ba1lxd29vUXU2U3BCUXliN1dqNmFDNlZvQ28vS210WVNXTWZDV2x1V3BpVzVJUDANCiMgd0kvelJpdmUvRHZRdlRYdmJpV3U1YThuN2REZDh3NnZtU2lYbUUwT1BRdnlDSW5XSDhNeUdPTHd4UzNPVzU2MA0KIyBTVGtLeGdyQ3hxMnU1YkxaMnhXSVVVVllPREp4SnhwL3NmUW4rTjRzT2lCcG1MSlppV2h1YjZlM2RNTkFCUWFtDQojIEFTb29Qb0kvRTAxbUM4Q3pUZlhoajM4Y2J4VjlSYWQyNVVBcVphUERYVkppaHNNZFl6YVhodC9hOC9qeUZxR2ENCiMgSitITnBaZlE3bDFqUWVOYkI1eUhQZ1ozQnRFR3NYVWZGTDVoWWJYdzNNWWJCTDdmUWNjT0tPN2VaUy9zbC9haA0KIyBYSmJZQU5haFJyMVo4NWVsQ1V0SUVKbUFIOUFBS2NXeG02VS9SWGNlTmNiU29xS2Zlbm9pK2tpVkg2djdSeU9BDQojIDlaNzR2MnUzUzVmaTYzVjRHdXpxTjVsNUdFdi8xck1qYUhYbXIvcjhpK3NMZ09wcE82LzhNTzBFVEk3ZjMzVnQNCiMgWTVFOTBaMVdUaysvZ0ZjaW9YZ1JNaUY2NzBFS3NULzdxTXlrWGNHaGlKdFhjVlpPU0VYQVFzbWJkbHNLZ0Vocg0KIyAvWG1md2IxdGJXckpVbk1URFhwUXpUR0NHWU13Z2hsL0FnRUJNSUdWTUg0eEN6QUpCZ05WQkFZVEFsVlRNUk13DQojIEVRWURWUVFJRXdwWFlYTm9hVzVuZEc5dU1SQXdEZ1lEVlFRSEV3ZFNaV1J0YjI1a01SNHdIQVlEVlFRS0V4Vk4NCiMgYVdOeWIzTnZablFnUTI5eWNHOXlZWFJwYjI0eEtEQW1CZ05WQkFNVEgwMXBZM0p2YzI5bWRDQkRiMlJsSUZOcA0KIyBaMjVwYm1jZ1VFTkJJREl3TVRFQ0V6TUFBQUxMdDNVNSt3SnhRallBQUFBQUFzc3dEUVlKWUlaSUFXVURCQUlCDQojIEJRQ2dnYkF3R1FZSktvWklodmNOQVFrRE1Rd0dDaXNHQVFRQmdqY0NBUVF3SEFZS0t3WUJCQUdDTndJQkN6RU8NCiMgTUF3R0Npc0dBUVFCZ2pjQ0FSVXdMd1lKS29aSWh2Y05BUWtFTVNJRUlHdmVKR1puSmp3aTRGcWN4UXNPMDEzbw0KIyBoTVRuL0l6U0E1Qm5iL2Z4bm1lM01FUUdDaXNHQVFRQmdqY0NBUXd4TmpBMG9CU0FFZ0JOQUdrQVl3QnlBRzhBDQojIGN3QnZBR1lBZEtFY2dCcG9kSFJ3Y3pvdkwzZDNkeTV0YVdOeWIzTnZablF1WTI5dElEQU5CZ2txaGtpRzl3MEINCiMgQVFFRkFBU0NBUUJUR0V1YXB5R3k2M3FJb05SdW1wcmIweGlWdFQwcEtDeEVwN1JhWEhmVnIxZzRFSy9tVlhFRw0KIyBlUTRUYzlXZkxBSHFaVlRtUFAxWmdHNC9WTml2a1JNWk9JZXBYMExvU1JXZmFyQlRtb0pKNVR0Z1JGVlhXOEpjDQojIFNyUUZvR2d1UVA5L3F6aEdsSGM3a2E4K1MyT1ozUE1Pai9CUVBUQW1YM0dUVmcxMHg0UjRtQ2JXVGxELzZXVkkNCiMgTlI5ck5BSVFVV3pteFNDSHVWbFVzQUJSNnJoelExOTdHRnYxTUdxNm5RUjJQcFFRZlFFNGFoQXlwT0syRWFGdw0KIyBmNk9leTVWNHlwL0gxWWw4MURYSlpOajhFbDdIMkd0VktDN3g1YkZRRkJuYzgrS3V2OTNRMjBzS0xnd1JiTXF2DQojIEc2Z2ZZclYvdGg3VVJsYUs2MU1MOFVXd2JrT041bWMyb1lJWEN6Q0NGd2NHQ2lzR0FRUUJnamNEQXdFeGdoYjMNCiMgTUlJVzh3WUpLb1pJaHZjTkFRY0NvSUlXNURDQ0Z1QUNBUU14RHpBTkJnbGdoa2dCWlFNRUFnRUZBRENDQVZRRw0KIyBDeXFHU0liM0RRRUpFQUVFb0lJQlF3U0NBVDh3Z2dFN0FnRUJCZ29yQmdFRUFZUlpDZ01CTURFd0RRWUpZSVpJDQojIEFXVURCQUlCQlFBRUlHSTM3LzFRNzBoTnl2Zm5hMVR2RUxwUHVuMHdSc3dNc2MwTE03azFTc0QrQWdaaktoMlMNCiMgNEQ0WUVqSXdNakl3T1RJMk1qQXhNREE0TGpZeFdqQUVnQUlCOUtDQjFLU0IwVENCempFTE1Ba0dBMVVFQmhNQw0KIyBWVk14RXpBUkJnTlZCQWdUQ2xkaGMyaHBibWQwYjI0eEVEQU9CZ05WQkFjVEIxSmxaRzF2Ym1ReEhqQWNCZ05WDQojIEJBb1RGVTFwWTNKdmMyOW1kQ0JEYjNKd2IzSmhkR2x2YmpFcE1DY0dBMVVFQ3hNZ1RXbGpjbTl6YjJaMElFOXcNCiMgWlhKaGRHbHZibk1nVUhWbGNuUnZJRkpwWTI4eEpqQWtCZ05WQkFzVEhWUm9ZV3hsY3lCVVUxTWdSVk5PT2tZNA0KIyBOMEV0UlRNM05DMUVOMEk1TVNVd0l3WURWUVFERXh4TmFXTnliM052Wm5RZ1ZHbHRaUzFUZEdGdGNDQlRaWEoyDQojIGFXTmxvSUlSWHpDQ0J4QXdnZ1Q0b0FNQ0FRSUNFek1BQUFHdXFndGNzelNsbFJvQUFRQUFBYTR3RFFZSktvWkkNCiMgaHZjTkFRRUxCUUF3ZkRFTE1Ba0dBMVVFQmhNQ1ZWTXhFekFSQmdOVkJBZ1RDbGRoYzJocGJtZDBiMjR4RURBTw0KIyBCZ05WQkFjVEIxSmxaRzF2Ym1ReEhqQWNCZ05WQkFvVEZVMXBZM0p2YzI5bWRDQkRiM0p3YjNKaGRHbHZiakVtDQojIE1DUUdBMVVFQXhNZFRXbGpjbTl6YjJaMElGUnBiV1V0VTNSaGJYQWdVRU5CSURJd01UQXdIaGNOTWpJd016QXkNCiMgTVRnMU1UTTNXaGNOTWpNd05URXhNVGcxTVRNM1dqQ0J6akVMTUFrR0ExVUVCaE1DVlZNeEV6QVJCZ05WQkFnVA0KIyBDbGRoYzJocGJtZDBiMjR4RURBT0JnTlZCQWNUQjFKbFpHMXZibVF4SGpBY0JnTlZCQW9URlUxcFkzSnZjMjltDQojIGRDQkRiM0p3YjNKaGRHbHZiakVwTUNjR0ExVUVDeE1nVFdsamNtOXpiMlowSUU5d1pYSmhkR2x2Ym5NZ1VIVmwNCiMgY25SdklGSnBZMjh4SmpBa0JnTlZCQXNUSFZSb1lXeGxjeUJVVTFNZ1JWTk9Pa1k0TjBFdFJUTTNOQzFFTjBJNQ0KIyBNU1V3SXdZRFZRUURFeHhOYVdOeWIzTnZablFnVkdsdFpTMVRkR0Z0Y0NCVFpYSjJhV05sTUlJQ0lqQU5CZ2txDQojIGhraUc5dzBCQVFFRkFBT0NBZzhBTUlJQ0NnS0NBZ0VBazR3YThTRTFEQXNkcHkzT2MrbGp3bURtb2p4Q3lDblMNCiMgYUdYWWJiTzFVK2llcmlDdzR4N203Mm5sL1hzOGd6VXBlTlJvbzJYZDJPZHlyYjB1S3FhcWRvbzVHQ0E4YzBTVA0KIyB0RDYxcVhrakp6NUx5VDlIZldBSWEzaXE5QldvRXRBMksvRTY2UlI5cWtialV0TjBzZDR6aTdBaWVUNUNzWkFmDQojIFlyakNNMjJKU21Lc1hZOTBKeHVSZklBc1NuSlBaR3ZETW1iTnladDBLeHhqUTNkRWZHc3g1WkRlVHV3MjNqVTANCiMgRms1UDdpa0thVER4U1NBcUpJbGN6TXF6Znd6RlNySDg2Vkx6UjBzTk1kMzVsNkxWTFgrcHNLMU1iTTJiUnVQcQ0KIyBwK1NWUXpja1VBWFVrdGZEQytxQmxGME5CVHJiYmpDMGFmQnFWTm80alJIUjVmNXl0dytsY1lIYnNRaUJoVDdTDQojIFdqWm9mdjFJMnV3OVlSeDBFZ0ozVEorRVZUYWVKVWw2a2JPUmQ2MG05c1hGYmVJM3V4eU10L0Q5THBSY1h2QzANCiMgVE4wNDFkV0lqay9aUXp2djAvb1FobjZEelVUWXhaZnhlTXRYSzhpeS9QSnlRbmdVV0w2SFhJOFQ2L055US9ITQ0KIyBjNnlJdHBwKzV5ekl5TUJvQXp4YkJyN1RZRzZNUTdLVjh0TEtUU0svMGk5SWoxbVFsYitBdTlEalpUVDVUVGZsDQojIG1GU0VLcHNvUllRd2l2YkpyYXRpbXRRd1FweGQvaEgzc3RVOEYrd21kdVExUzV1bFFEZ3JXTHVLTkRXbVJTVzMNCiMgNWhEL2ZpYTBUTHQ1S0tCV2xYT2VwK3MxVjZzSzhjYmtqQjk0VldFODFzREFycVVFUkRiMmN4aU5GZVBoQXZLKw0KIyBZcEdhbzRrei9EVUNBd0VBQWFPQ0FUWXdnZ0V5TUIwR0ExVWREZ1FXQkJUVE1HL2Z2eWhnaXNHcHJYVCsvTzFrDQojIE9tRlI3akFmQmdOVkhTTUVHREFXZ0JTZnB4VmRBRjVpWFlQMDVkSmxweHRUTlJucGNqQmZCZ05WSFI4RVdEQlcNCiMgTUZTZ1VxQlFoazVvZEhSd09pOHZkM2QzTG0xcFkzSnZjMjltZEM1amIyMHZjR3RwYjNCekwyTnliQzlOYVdOeQ0KIyBiM052Wm5RbE1qQlVhVzFsTFZOMFlXMXdKVEl3VUVOQkpUSXdNakF4TUNneEtTNWpjbXd3YkFZSUt3WUJCUVVIDQojIEFRRUVZREJlTUZ3R0NDc0dBUVVGQnpBQ2hsQm9kSFJ3T2k4dmQzZDNMbTFwWTNKdmMyOW1kQzVqYjIwdmNHdHANCiMgYjNCekwyTmxjblJ6TDAxcFkzSnZjMjltZENVeU1GUnBiV1V0VTNSaGJYQWxNakJRUTBFbE1qQXlNREV3S0RFcA0KIyBMbU55ZERBTUJnTlZIUk1CQWY4RUFqQUFNQk1HQTFVZEpRUU1NQW9HQ0NzR0FRVUZCd01JTUEwR0NTcUdTSWIzDQojIERRRUJDd1VBQTRJQ0FRQmR2NUh3L1ZVQVJBNDhyVE1ERUFNaGMvaHdsQ1pxdTJOVVVzd1NRdGlIZjA4VzFWdTMNCiMgemhHL1JEVVpKTmlhRS94Lzg0NitlWUxsNlBEYzF6VlZHTHZpdFlaUWhPL1h4YXF2eDRHOEJKM2g0TURFVnNEeQ0KIyBTYzQ2YjluSktRd01OaDF2cnZmeHBEVEsrcC9zQlp5R0ErZTBKeitlRTFxbEltYVBOU1I3c1MrTUh4NkxRR2RqDQojIFRHWDRCQnhMRWtiOVdleWIwakE1NnZ3VFdhSlV0aDgrZjE4Z04xcHEvVnVyMkw2Q2RsL1dGTHRxa2FuRnVLMEkNCiMgbXZVb1lQaU1qSUFHVEVlRjZnODZHRzFDYlc3T2NUdHVVckVmeWxUdGJZRDU2cUNDdzJRemRVSFNldk5Ga0dxYg0KIyBoS1lGSTJFNC9QTGVoODZZdHhFcjlxV2c0Q3ZxZDZHTHlMbVdHWk9EVXVRNERFS0V2QWUrVzZJSmowcjdhOGltDQojIDNqeUtncitINjNQbEdCVjF2NUx6SENmdmJ5VTN3bytTUUhaRnJtS0p5dSsyQURubkJKUjJIb1VYRmZGNUw1dXkNCiMgQUZyS2Z0bkpwOU9rTXpzRkE0RmpCcWgyeTVWL2xlQWF2SWJIemlUaEhueVkvQUhkRFQwSkVBYXpmazA2M3BPcw0KIyA5ZXB6S1UyN3BuUHpGTkFOeG9tbm5pa3JJNmhibUlnTVdPa3VkNWRNU08xWUlVS0FDampOdW4wSTBoT24zc28rDQojIGR6ZUJsVm95OFNsVHhLbnRWbkEzMXlSSFpZTXJJNk1PQ0VoeCs0VWxNczUyUTY0d3NheFk5MmRqcUoyMVp6WnQNCiMgUU5CclpCdk9ZMUpuSVcyRVNtdkJEWWFhQm9ac1lxNWhWV3BTUDlpM2JVY1BROEY0TWpreHFYeEp6RENDQjNFdw0KIyBnZ1Zab0FNQ0FRSUNFek1BQUFBVnhlZHJuZ0tiU1prQUFBQUFBQlV3RFFZSktvWklodmNOQVFFTEJRQXdnWWd4DQojIEN6QUpCZ05WQkFZVEFsVlRNUk13RVFZRFZRUUlFd3BYWVhOb2FXNW5kRzl1TVJBd0RnWURWUVFIRXdkU1pXUnQNCiMgYjI1a01SNHdIQVlEVlFRS0V4Vk5hV055YjNOdlpuUWdRMjl5Y0c5eVlYUnBiMjR4TWpBd0JnTlZCQU1US1UxcA0KIyBZM0p2YzI5bWRDQlNiMjkwSUVObGNuUnBabWxqWVhSbElFRjFkR2h2Y21sMGVTQXlNREV3TUI0WERUSXhNRGt6DQojIE1ERTRNakl5TlZvWERUTXdNRGt6TURFNE16SXlOVm93ZkRFTE1Ba0dBMVVFQmhNQ1ZWTXhFekFSQmdOVkJBZ1QNCiMgQ2xkaGMyaHBibWQwYjI0eEVEQU9CZ05WQkFjVEIxSmxaRzF2Ym1ReEhqQWNCZ05WQkFvVEZVMXBZM0p2YzI5bQ0KIyBkQ0JEYjNKd2IzSmhkR2x2YmpFbU1DUUdBMVVFQXhNZFRXbGpjbTl6YjJaMElGUnBiV1V0VTNSaGJYQWdVRU5CDQojIElESXdNVEF3Z2dJaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQ0R3QXdnZ0lLQW9JQ0FRRGs0YVpNNTdSeUlRdDUNCiMgb3N2WEpIbTlEdFdDMC8zdW5BY0gwcWxzVG5YSXlqVlg5Z0YvYkVyZzRyMjVQaGRnTS85Y1Q4ZG05NVZUY1ZyaQ0KIyBma3BhL3JnMlo0VkdJd3kxalJQUGR6TEFFQmpvWUgxcVVvTkV0NmFPUm1zSEZQUEZkdldHVU56QlJNaHhYRkV4DQojIE42QUtPRzZON2RjUDJDWlRmRGxoQW5yRXF2MXlhYThkcTZ6Mk5yNDFKbVRhbUR1Nkduc3pyWUJiZm93UUhKMVMNCiMgL3Jib1lpWGNhZy9QWGZUK2psUFAxdXlGVmszdjNieU5wT09SajdJNUxGR2M2WEJwRGNvMkxYQ09NY2cxS0wzag0KIyB0SWNrdytESmozNjFWSS9jK2dWVm1HMW9PNXBHdmUya3Jub3BONnpMNjRORjUwWnV5akxWd0lZd1hFOHM0bUt5DQojIHpibmlqWWprbHF3QlNydStjYWtYVzJkZzN2aVNrUjRkUGYwZ3ozTjlRWnBHZGMzRVh6VGRFb25XL2FVZ2ZYNzgNCiMgMlo1RjM3WnlMOXQ5WDRDNjI2cCtOdXcyVFBZcmJxZ1NVZWkvQlFPajBYT21UVGQwbEJ3MGdnL3dFUEszUnhqdA0KIyBwK2laZkQ5TTI2OWV3dlBWMkhNOVEwN0JNemxNamdLOFFtZ3VFT3FFVVViaTBiMXFHRnBoQVhQS1o2SmUxeWgyDQojIEF1SXpHSExYcHlEd3d2b1NDdGRqYnd6Sk5tU0xXNkNtZ3lGZFh6QjBrWlNVMkxsUStRdUpZZk0yQmpVWWhFZmINCiMgM0J2Ui9iTFVITVZyOWx4U1VWMFMyeVc2cjFBRmVtekZFUjF5NzQzNVVzU0ZGNVBBUEJYYkdqZkhDQlVZUDNpcg0KIyBSYmIxSG9kZTJvK2VGbkpweHE1N3Q3YythdUl1clFJREFRQUJvNElCM1RDQ0Fka3dFZ1lKS3dZQkJBR0NOeFVCDQojIEJBVUNBd0VBQVRBakJna3JCZ0VFQVlJM0ZRSUVGZ1FVS3FkUy9tVEVtcjZDa1R4R05TblBFUDh2Qk80d0hRWUQNCiMgVlIwT0JCWUVGSituRlYwQVhtSmRnL1RsMG1XbkcxTTFHZWx5TUZ3R0ExVWRJQVJWTUZNd1VRWU1Ld1lCQkFHQw0KIyBOMHlEZlFFQk1FRXdQd1lJS3dZQkJRVUhBZ0VXTTJoMGRIQTZMeTkzZDNjdWJXbGpjbTl6YjJaMExtTnZiUzl3DQojIGEybHZjSE12Ukc5amN5OVNaWEJ2YzJsMGIzSjVMbWgwYlRBVEJnTlZIU1VFRERBS0JnZ3JCZ0VGQlFjRENEQVoNCiMgQmdrckJnRUVBWUkzRkFJRURCNEtBRk1BZFFCaUFFTUFRVEFMQmdOVkhROEVCQU1DQVlZd0R3WURWUjBUQVFILw0KIyBCQVV3QXdFQi96QWZCZ05WSFNNRUdEQVdnQlRWOWxiTGoraWlYR0pvMFQyVWtGdlh6cG9ZeERCV0JnTlZIUjhFDQojIFR6Qk5NRXVnU2FCSGhrVm9kSFJ3T2k4dlkzSnNMbTFwWTNKdmMyOW1kQzVqYjIwdmNHdHBMMk55YkM5d2NtOWsNCiMgZFdOMGN5OU5hV05TYjI5RFpYSkJkWFJmTWpBeE1DMHdOaTB5TXk1amNtd3dXZ1lJS3dZQkJRVUhBUUVFVGpCTQ0KIyBNRW9HQ0NzR0FRVUZCekFDaGo1b2RIUndPaTh2ZDNkM0xtMXBZM0p2YzI5bWRDNWpiMjB2Y0d0cEwyTmxjblJ6DQojIEwwMXBZMUp2YjBObGNrRjFkRjh5TURFd0xUQTJMVEl6TG1OeWREQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FnRUENCiMgblZWOS9DcXQ0U3dmWndFeEpGdmhubkpML0tsdjZsd1V0ajVPUjJSNHNRYVRsejB4TTdVNTE4SnhOai9hWkd4OA0KIyAwSFU1YmJzUE1lVENqL3RzMGFHVUdDTHU2V1puT2xOTjNaaTZ0aDU0MkRZdW5LbUNWZ0FEc0FXK2llaHA0TG9KDQojIDdudmZhbSsrS2N0dTJEOUlkUUhaR041dGdnejFiU05VNUhoVGRTUlh1ZDJmODQ0OXh2Tm8zMlgycEZhcTk1VzINCiMgS0ZVbjBDUzlRS0MvR2JZU0VoRmRQU2ZnUUpZNHJQZjVLWW5EdkJld1ZJVkNzL3dNbm9zWmllZndDMnFCd29FWg0KIyBRaGxTZFlvMndoM0RZWE11TEd0N2JqOHNDWGdVNlpHeXFWdmZTYU4wREx6c2tZRFNQZVpLUG1ZN1Q3dUcraklhDQojIDJaYjBqL2FSQWZiT3huVDk5a3h5YnhDcmRUREZOTEI2MkZEK0NsamRRRHpIVkcyZFkzUklMTEZPUnkzQkZBUngNCiMgdjJUNUpMNXpiY3FPQ2IyekFWZEpWR1RaYzlkL0hsdEVBWTVhR1pGckRaK2tLTnhuR1Nna3VqaExtbTc3SVZScg0KIyBha1VSUjZueHQ2N0k2SWxlVDUzUzBFeDJ0VmRVQ2JGcEFVUitmS0ZoYkhQK0NydnNRV1k5YWYzTHdVRkpmbjZUDQojIHZzdjRPK1MzRmIrMHpqNmxNVkdFdkw4Q3dZS2lleGNkRlltTmNQN250ZEFvR29rTGp6YmF1a3o1bS84SzZUVDQNCiMgSkRWbksrQU51T2FNbWRiaEl1cndKMEk5SlpUbWRIUmJhdEdlUHUxK29ERXpmYnpMNlh1L09IQkUwWkR4eUtzNg0KIyBpam9JWW4vWmNHTlRUWTN1Z20ybEJSREJjUVpxRUxRZFZUTllzNkZ3WnZLaGdnTFNNSUlDT3dJQkFUQ0IvS0dCDQojIDFLU0IwVENCempFTE1Ba0dBMVVFQmhNQ1ZWTXhFekFSQmdOVkJBZ1RDbGRoYzJocGJtZDBiMjR4RURBT0JnTlYNCiMgQkFjVEIxSmxaRzF2Ym1ReEhqQWNCZ05WQkFvVEZVMXBZM0p2YzI5bWRDQkRiM0p3YjNKaGRHbHZiakVwTUNjRw0KIyBBMVVFQ3hNZ1RXbGpjbTl6YjJaMElFOXdaWEpoZEdsdmJuTWdVSFZsY25SdklGSnBZMjh4SmpBa0JnTlZCQXNUDQojIEhWUm9ZV3hsY3lCVVUxTWdSVk5PT2tZNE4wRXRSVE0zTkMxRU4wSTVNU1V3SXdZRFZRUURFeHhOYVdOeWIzTnYNCiMgWm5RZ1ZHbHRaUzFUZEdGdGNDQlRaWEoyYVdObG9pTUtBUUV3QndZRkt3NERBaG9ERlFDOG1yQ1QvR2ZKeUJYaw0KIyBaM0xsdmdqQVQ5TmE0NkNCZ3pDQmdLUitNSHd4Q3pBSkJnTlZCQVlUQWxWVE1STXdFUVlEVlFRSUV3cFhZWE5vDQojIGFXNW5kRzl1TVJBd0RnWURWUVFIRXdkU1pXUnRiMjVrTVI0d0hBWURWUVFLRXhWTmFXTnliM052Wm5RZ1EyOXkNCiMgY0c5eVlYUnBiMjR4SmpBa0JnTlZCQU1USFUxcFkzSnZjMjltZENCVWFXMWxMVk4wWVcxd0lGQkRRU0F5TURFdw0KIyBNQTBHQ1NxR1NJYjNEUUVCQlFVQUFnVUE1dHlFOURBaUdBOHlNREl5TURreU56QXdNRGN4TmxvWUR6SXdNakl3DQojIE9USTRNREF3TnpFMldqQjNNRDBHQ2lzR0FRUUJoRmtLQkFFeEx6QXRNQW9DQlFEbTNJVDBBZ0VBTUFvQ0FRQUMNCiMgQWd0aEFnSC9NQWNDQVFBQ0FoRDhNQW9DQlFEbTNkWjBBZ0VBTURZR0Npc0dBUVFCaEZrS0JBSXhLREFtTUF3Rw0KIyBDaXNHQVFRQmhGa0tBd0tnQ2pBSUFnRUFBZ01Ib1NDaENqQUlBZ0VBQWdNQmhxQXdEUVlKS29aSWh2Y05BUUVGDQojIEJRQURnWUVBZE9RTTR3MjBpR3RQVTNHZGxyc1FWQzdTYmtvdERrMXdBYlJ4SmVWellKTFQwWStmUUMyOWRaK24NCiMgaVdMVHVHdEV3eTJodTZGSEcrZDVqTENheUkrUnZhakhpbHBXSnpLMGlPdnc3Zlp2RmoxTTU3NENzdkdzNXFIMg0KIyBrWTVIWnBMaS9Fcnl5Qmw2dmhXc2hvcVpuSlBMNmJlbzJCOUpsYngzZk5VbG9QTGNIWG94Z2dRTk1JSUVDUUlCDQojIEFUQ0JrekI4TVFzd0NRWURWUVFHRXdKVlV6RVRNQkVHQTFVRUNCTUtWMkZ6YUdsdVozUnZiakVRTUE0R0ExVUUNCiMgQnhNSFVtVmtiVzl1WkRFZU1Cd0dBMVVFQ2hNVlRXbGpjbTl6YjJaMElFTnZjbkJ2Y21GMGFXOXVNU1l3SkFZRA0KIyBWUVFERXgxTmFXTnliM052Wm5RZ1ZHbHRaUzFUZEdGdGNDQlFRMEVnTWpBeE1BSVRNd0FBQWE2cUMxeXpOS1dWDQojIEdnQUJBQUFCcmpBTkJnbGdoa2dCWlFNRUFnRUZBS0NDQVVvd0dnWUpLb1pJaHZjTkFRa0RNUTBHQ3lxR1NJYjMNCiMgRFFFSkVBRUVNQzhHQ1NxR1NJYjNEUUVKQkRFaUJDRFQrWlA1K3VDaGZ0bGttbGdTcTFoZHNlNytzTU1LWHNBTw0KIyAxdklvaVA3RmlEQ0IrZ1lMS29aSWh2Y05BUWtRQWk4eGdlb3dnZWN3Z2VRd2diMEVJRWtvSFQ2NGpNTmFvZTZmDQojIFQyYXBOVHk0NkRxMTdEVEs3VzVEU0pUOFVtOW9NSUdZTUlHQXBINHdmREVMTUFrR0ExVUVCaE1DVlZNeEV6QVINCiMgQmdOVkJBZ1RDbGRoYzJocGJtZDBiMjR4RURBT0JnTlZCQWNUQjFKbFpHMXZibVF4SGpBY0JnTlZCQW9URlUxcA0KIyBZM0p2YzI5bWRDQkRiM0p3YjNKaGRHbHZiakVtTUNRR0ExVUVBeE1kVFdsamNtOXpiMlowSUZScGJXVXRVM1JoDQojIGJYQWdVRU5CSURJd01UQUNFek1BQUFHdXFndGNzelNsbFJvQUFRQUFBYTR3SWdRZ3lNMUpJZjNNU2orMVgxdmQNCiMgaWNHQVoxMGVia1BrQnhQdVB1OUx1RFdXaGxJd0RRWUpLb1pJaHZjTkFRRUxCUUFFZ2dJQVVIMUNtTnJnejZBZg0KIyBFaTl2WXA3bE1aL3pPcWFqWksyVkljSisvN0FFQUhFV2FNS2lvaWxBWUhRMWVJY29tb2ptUUkyRktwTTVYRUIzDQojIEFzNEF5S0hXajJGQStvWDNLN3IzakRvVUJ1a1dyQlN1L2tjbEQzclBkOWEwcy92TW1Fd3YzUW5lY0lwMEM3NUYNCiMgbWJ2V2k0Q2tqM2NtN3BPM2xKOHZtN2tmMU0wWGVmaWtjTDFaZTIzb2VxVWpTWHU1dEY2Z0RhT29RdHVxR1BQeg0KIyBsUVlzQ0toL05RUjQrRnBnLzB3S0U1Wi8rWlN3allGT1pLZStPYktrRWQ3OU13dkUyZjlHSlMwQXdoUWJDRENDDQojIGV3bzJsdmtDc2psU2dUU25taHhBV05CY2x6ZWJzS3RIRnZkSDAxY0NLNW5MbVVWb01rM3VFOUFqY0dyQytIMDINCiMgVHpoWUdIZUVGOFZ6RTYrS0xmOHp3NkpuYSsrZlFqUWtnalFDdlB3bWphcnNxbGZHSERLUy95NHpVYUthektWbA0KIyBMSlFxYkNNcXdJa3FJaFhkMkVpa1YzN2hJek44eVVJR2FTTFBBRjdCOVBjcEo4Y1Q3cVU0UDc3Qk9mNFBMQTlkDQojIFlsWjliVFE2UFQ5NFFMS3dwdnZMVGtscDg5VkU5emtGTmYxSW96QkE2eXk0Ym9zRmhJc1ZHZEkxZkliVEJSZlENCiMgTEd2akZIZVlhdVpjajVoRFJvM3NQTUlRV2VWblAxeURrMFArbDRJSGlnSzZFTGw3VDBvMDNOaUVYVVh1OHJCaQ0KIyBYZ1BxcWhldHFJa2pmVCtLVzRtM1pTMEdBbUZ1Qk5iYnIwMWkrM3d5cVlFVGhyaWRJR2swY1RwSEk3dHdyR3BzDQojIG5TYi9ENngzUHlTc2RVMWF3cmFydlhMQUhaTTNBM2s9DQojIFNJRyAjIEVuZCBzaWduYXR1cmUgYmxvY2sNCg=='

if (-not (Test-Path $LogPath))
{
    New-Item -Force -ItemType directory -Path $LogPath
}
Start-Transcript -Path $LogFile

#Cleanup lingering resources from previous runs
Setup

$content = [System.Convert]::FromBase64String($SystemScript)

New-Item -ItemType Directory -Force -Path $ScriptFolderPath
Set-Content -Path $SystemScriptPath -Value $content -Encoding Byte

$Trigger = New-ScheduledTaskTrigger -Once -At ((Get-Date).AddHours(4)) -RepetitionInterval (New-TimeSpan -Hours 4) # Specify the trigger settings
$Settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries
$User = "NT AUTHORITY\SYSTEM"
$Argument = "-ExecutionPolicy Bypass $SystemScriptPath"
$Action = New-ScheduledTaskAction -Execute "PowerShell.exe" -Argument $argument # Specify what program to run andtask with its parameters
Register-ScheduledTask -TaskName $ScheduledTaskName -Trigger $Trigger -User $User -Action $Action -Settings $Settings -RunLevel Highest -Force

$MaxRetries = 10
Start-ScheduledTask -TaskName $ScheduledTaskName
$ScheduledTask = Get-ScheduledTask -TaskName $ScheduledTaskName -ErrorAction SilentlyContinue
# Wait for the scheduled task to complete so its log can be read and uploaded
while (-not (($ScheduledTask.State -eq 'Ready') -or ($MaxRetries -eq 0))) 
{
    Write-Host "Waiting for scheduled task to complete"
    Start-Sleep -seconds 60
    $MaxRetries--
    $ScheduledTask = Get-ScheduledTask -TaskName $ScheduledTaskName -ErrorAction SilentlyContinue
    if (-not $ScheduledTask)
    {
        # The scheduled task was removed by the install script because it installed clients successfully
        break
    }
}

if (-not $ScheduledTask)
{
    # The scheduled task was removed by the install script because it installed clients successfully
    Write-Host "[SUCCESSFUL_AUTOPATCH_CLIENT_SETUP_SCHEDULED]"
    Cleanup
    Stop-Transcript -Verbose
    exit 0
}

if ($MaxRetries -ne 0)
{
    # There was some error in attempting to install the clients
    Write-Error "[FAILED_AUTOPATCH_CLIENT_SETUP_SCHEDULED]" -Category NotInstalled
}
else
{
    # We timed out on waiting for the task to complete
    Write-Error "[UNKNOWN_AUTOPATCH_CLIENT_SETUP_SCHEDULED]" -Category OperationTimeout
}

# Grab results from most recent log file and add them to the transcript
$InternalScriptPrefix = 'AutopatchClientSetupInstallTask'
$LogFound = $false
foreach ($InstallLogFile in (Get-ChildItem $LogPath | Sort-Object LastAccessTime -Descending)) 
{
    if ($InstallLogFile.Name.StartsWith($InternalScriptPrefix) -and $InstallLogFile.Extension.Equals('.log')) 
    {
        Write-Error "----------[Start] Results from Install Task ----------"
        $FullInstallLogPath = $LogPath + '\' + $InstallLogFile.Name
        $LogContents = Get-Content $FullInstallLogPath -Raw
        Write-Error $LogContents
        Write-Error "----------[End] Results from Install Task ----------"
        $LogFound = $true
        break
    }
}

if (-not $LogFound)
{
    Write-Error "[Log Not Found]"
    Get-ChildItem $LogPath | Sort-Object LastAccessTime -Descending
}

Stop-Transcript -Verbose
exit 8
